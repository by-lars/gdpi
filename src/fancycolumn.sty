% ---------------------------------------------
% content layout
% ---------------------------------------------
\newcommand{\halfpage}[1]{\partofpage{48}{#1}}

\newcommand{\thirdpage}[1]{\partofpage{31}{#1}}

\usepackage{adjustbox}
\newcommand{\partofpage}[2]{
	\begin{minipage}{0.#1\textwidth}
			\begin{flushleft}
				#2
			\end{flushleft}
	\end{minipage}
}

% corresponds to '\halfpage', however, with the new columns we could use larger values
% (same for thirdnext)
\def\halfnext{.489\textwidth}
% corresponds to '\thirdpage'
\def\thirdnext{.31\textwidth}

\newcommand\leftandright[2]{%
    \halfpage{#1}%
    \hfill
    \halfpage{#2}%
}

\newcommand\leftmiddleandright[3]{%
    \thirdpage{#1}%
    \hfill
    \thirdpage{#2}%
    \hfill
    \thirdpage{#3}%
}

\newcommand\leftthenright[2]{%
    \halfpage{#1}%
    \hfill
    \onslide<2->{\halfpage{#2}}%
}

\newcommand\rightthenleft[2]{
    \onslide<2->{\halfpage{#1}}
    \hfill
    \halfpage{#2}
}

\newcommand\leftmiddlethenright[3]{%
    \thirdpage{#1}%
    \hfill
    \onslide<2->{\thirdpage{#2}}%
    \hfill
    \onslide<3->{\thirdpage{#3}}%
}

\newcommand\rightmiddlethenleft[3]{%
    \onslide<3->{\thirdpage{#1}}%
    \hfill
    \onslide<2->{\thirdpage{#2}}%
    \hfill
    \thirdpage{#3}%
}


% here, we configure the defaults
\def\fancy@cols@extra{} % no extra options for the columns environment
% init | step
\def\fancy@cols@animation#1#2{%
    % defines the increment for each step (always positive)
    % you can supply a step greater than 0, allowing for 'empty-animations' between the columns
    \def\fancy@cols@anim@step{#1}%
    % '-' for keep, '' (empty) for forget
    \def\fancy@cols@anim@suff{#2}%
}
\def\fancy@cols@anim@init{1}     % start on the first column
\def\fancy@cols@anim@step@sign{+}% count up (if there is anything to count)
\newdimen\fancy@cols@total@width % holds the column width
\newdimen\fancy@cols@height      % holds the target height of the columns environment (negative for auto)

\def\fancy@cols@widths@max{100}  % the maximum number to be used for widths
% with this, we define the keys that are usable within the optional argument of '\fancycolumns'

\def\@fancy@animation@none{\fancy@cols@animation{0}{-}}
\def\@fancy@animation@keep{\fancy@cols@animation{1}{-}}
\def\@fancy@animation@forget{\fancy@cols@animation{1}{}}


\pgfqkeys{/fancy columns}{
  % search also allows to write 'c' instead of 'align/c' etc.
  /fancy columns/.search also = {/fancy columns/align},
  align/c/.code              = \def\fancy@cols@valign{c}, % centered
  align/t/.code              = \def\fancy@cols@valign{t}, % top (baseline)
  align/b/.code              = \def\fancy@cols@valign{b}, % bottom (baseline)
  align/T/.code              = \def\fancy@cols@valign{T}, % top (with height, that is, aligns to the "very-top")
  % with 'width' the user can set the total width to be occupied by the columns
  width/.code                = \def\fancy@cols@target@width{#1},
  % allows to define a preset height (in case of overflowing/changing heights on animations etc.)
  height/.code               = \setlength\fancy@cols@height{#1},
  no height/.style           = { height = -1pt },
  % define the margin between columns
  margin/.code               = \def\fancy@cols@margin{#1},
  % widths={30,20} will give the first column 30%, the next 20%, and the rest (if any) an even share of the remaining 50%
  widths/.code               = \def\fancy@cols@widths{#1},
  % this key is only for users who need to change anything for the underlying columns mechanism
  extra/columns/.code        = \def\fancy@cols@extra{#1},
  % control the number of columns
  columns/.code              = \def\fancy@cols@count{#1},
  % allow for 'animation=...'
  animation/.code            = {%
    \expandafter\ifcsname @fancy@animation@#1\endcsname
        \csname @fancy@animation@#1\endcsname
    \else
        \PackageError{fancybeamer}{The animation '#1' does not exist! Choose either 'keep', 'forget', or 'none'.}%
    \fi
  },
  % comfort variants, just so the user does not have to write 'animation='
  keep/.style                = {animation=keep},
  forget/.style              = {animation=forget},
  % deliberately not offer a comfort-variant for the default (none)
  % reverse animation order by setting the initial animation to the amount of columns and making the step (animation delta
  % per column) negative (\fancy@cols@anim@step@sign controls if the animation goes up (+) or down (-))
  reverse/.code              =  \def\fancy@cols@anim@init{\fancy@cols@count}\def\fancy@cols@anim@step@sign{-},
  % by overwriting the style '/fancy columns/@defaults',
  % the user can change these defaults
  @defaults/.style           = {%
    c, % center align
    no height,
    columns = 2, animation=none, % one column, no animation
    widths = {}, % use default widths (evenly distribute)
    width = \linewidth, %
    % this number was merely chosen to look visually pleasing
    % we could also use the default columnsep of latx,
    margin = 0.035\linewidth
  }
}

% allows to user to overwrite the defaults
\newcommand\setfancycolumnsdefault[1]{\pgfqkeys{/fancy columns}{@defaults/.append style={#1}}}

% we need two counters
% 'fancy@cols@current' holds the column we are currently in (starts with 0)
\newcounter{fancy@cols@current}
% 'fancy@cols@currentanim' holds the slide the current column should appear on
\newcounter{fancy@cols@currentanim}
% 'fancy@cols@current' will increment by 1 for each column
% 'fancy@cols@currentanim' may increment similarly (animation without reverse)
% ...                     may decrement by 1      (animation with reverse)
% ...                     may remain constant     (without animation)

% code to be executed at the start of the columns
\newcommand\fancy@cols@init{%
    % reset the counter for the current column
    \setcounter{fancy@cols@current}{0}%
    % initialize the current animation counter with the start animation
    % this is 1 without reverse, and the number of columns if reverse is active
    \setcounter{fancy@cols@currentanim}{\fancy@cols@anim@init}%
    % due to the way beamer calculates the columns, we remove the margin from the width
    % see etoolbox for an explanation of '\dimdef' (basically allows for calculations with dimensions)
    \dimdef{\fancy@cols@total@width}{\linewidth-\fancy@cols@margin*\fancy@cols@count+\fancy@cols@margin}%
    % activate(/overwrite) the '\nextcolumn' macro within the environment
    \let\nextcolumn\fancy@nextcolumn
    % a rather complicated macro, which sets/calculates the widths for all columns
    \fancy@cols@initialize@widths
    % issue the first column
    % NOTE: we don't guard if 'columns' is below 1 (e.g. we always assume, there is 1 column)
    \nextcolumn
}

% a temporary counter so we do not need to use low-level tex counters (like @tempcnta)
% with '\value{fancy@cols@temp}' we get the numerical value of the counter
% with '\arabic{fancy@cols@temp}' we get the (textual) "number"-value of the counter
\newcounter{fancy@cols@temp}

% the only thing important by this macro are other commands sequences:
% \fancy@cols@col@0, \fancy@cols@col@1, \fancy@cols@col@2, ...
% which hold the total width, column with number 0, 1, 2, ... should occupy
% it uses the total number of columns, the supplied total width of all columns
% and the desired 'widths={...}'. If there are more columns (e.g. widths={30}, columns=3)
% it will automatically distributed the remaining space evenly.
% note, that while we assume the units of 'widths' to be percentages, it is really the
% macro '\fancy@cols@widths@max' which holds the number they should sum up to (i.e. 100)
\newcommand\fancy@cols@initialize@widths{%
    % first of all, we iterate over the given 'widths={...}' (stored within \fancy@cols@widths)
    % we use 'fancy@cols@temp' to count the number of widths supplied
    \setcounter{fancy@cols@temp}{0}%
    % The macro '\fancy@cols@widths@max' holds the desired target which all the supplied widths should sum up to it is
    % probably 100 (therefore, supplying widths={20,10}, would reduce '\fancy@cols@remaining@width' from 100 to 70)
    \let\fancy@cols@remaining@width\fancy@cols@widths@max
    % now we use '@for' which iterates over all widths (comma-separated) stored in '\fancy@cols@widths'
    % the loop variable '\@fancy@cols@width' will hold the current width in each loop
    \@for\@fancy@cols@width:=\fancy@cols@widths\do{%
        % with 'protected@csedef' we (in short) define a new macro but supply its name in terms of another macro
        % this macro name can contain numbers etc.
        % essential, we define '\fancy@cols@col@<current column>' that is, 'widths={20,30}' would create:
        % \fancy@cols@col@0, which holds the calculated value for 20
        % \fancy@cols@col@1, which holds the calculated value for 20
        % See the etoolbox package for an explanation of '\csdimdef'
        \csdimdef{fancy@cols@col@\arabic{fancy@cols@temp}}{%
            % We make math on dimensions. Essentially, we calculate the total width to be occupied
            % by those column (i.e. translating from the percentages of 'widths' to the real dimension)
            \fancy@cols@total@width*\@fancy@cols@width/\fancy@cols@widths@max
            % Example:
            % with '\fancy@cols@total@width' being probably something like '\linewidth' and '\fancy@cols@widths@max' being 100
            % this can be read as: '\linewidth * \@fancy@cols@width/100'
            % Suppose, the current '\@fancy@cols@width' is 20, this would result in '\linewidth * 0.2' or "20% of the width of the line"
        }%
        % now we update the amount of widths left (e.g., when we have '\fancy@cols@remaining@width' as 100 and a '\@fancy@cols@width' of 20,
        % this will reduce the remaining number to 80). See etoolbox for an explanation of numdef
        \numdef\fancy@cols@remaining@width{\fancy@cols@remaining@width-\@fancy@cols@width}%
        % step the counter to move to the width for the next column
        \stepcounter{fancy@cols@temp}%
        % check, if we have too many columns
        \ifnum\value{fancy@cols@temp}>\fancy@cols@count\relax
            \PackageWarning{fancybeamer}{You specified '\fancy@cols@count' columns, but supplied more lengths to widths (\fancy@cols@widths) (page: \thepage, frame: \insertframenumber,\on@line). Reduce the amount of widths supplied or increase the number of columns}%
        \fi
    }%
    % after processing all 'widths={...}' we check, if the user supplied (in sum) more than we have 'e.g., when having percentages (with 100)
    % supplying 'widths={90,20}' would issue this error as we now have a '110%' column
    \ifnum\fancy@cols@remaining@width<0\relax
        \PackageWarning{fancybeamer}{Widths (\fancy@cols@widths) sum up to more than the allowed max '\fancy@cols@widths@max' (page: \thepage, frame: \insertframenumber,\on@line). Please update the supplied widths.}%
    \fi
    % for the remaining columns, distribute remaining width evenly
    % if the user supplied 'columns=5' (stored in \fancy@cols@count) and 'widths={15,30}',
    % this will set '\@fancy@cols@remaining@cols' to 3.
    \edef\@fancy@cols@remaining@cols{\the\numexpr\fancy@cols@count-\value{fancy@cols@temp}}%
    % NOTE: maybe we should notify the user of the even distribution?
    % we only do something, if there is at least one column that the user supplied no width
    \ifnum\@fancy@cols@remaining@cols>0
        % we distribute the width evenly. therefore we calculate the width that remains for each column
        % if there are 60%, and 3 columns remaining, we give each '\fancy@cols@total@width * 0.2' or 20%
        % of the total column width.
        \dimdef\@fancy@cols@remaining@colwidth{%
            \fancy@cols@total@width*%
                % this part of the expression basically calculates the percentage (20%...)
                \fancy@cols@remaining@width/\fancy@cols@widths@max/\@fancy@cols@remaining@cols%
        }%
        % now, we use a while loop to iterate over the remaining columns
        \@whilenum\value{fancy@cols@temp}<\fancy@cols@count\do{% 'while(i < #columns) { ... }
            % we define the '\fancy@cols@col@<current column>'
            % macros holding the width. With 60%, a total width of '\linewidth'
            % and three out of 5 columns remaining, this would define:
            % \fancy@cols@col@2, which holds \linewidth*0.2
            % \fancy@cols@col@3, which holds \linewidth*0.2
            % \fancy@cols@col@4, which holds \linewidth*0.2
            \csedef{fancy@cols@col@\arabic{fancy@cols@temp}}{\@fancy@cols@remaining@colwidth}%
            % increment the counter
            \stepcounter{fancy@cols@temp}% i += 1
        }%
    \fi
}

% this is the macro, that will become '\nextcolumn' within the 'fancycolumns' environment
\newcommand\fancy@nextcolumn{%
    % issue a warning if too many columns
    \ifnum\value{fancy@cols@current}<\fancy@cols@count\else
        % this mus be an error, we calculate widths etc. only for the given columns
        \PackageError{fancybeamer}{You configured 'columns=\fancy@cols@count', but supplied more (at least \arabic{fancy@cols@current}, page: \thepage, frame: \insertframenumber,\on@line)}{Either remove the command, or choose another Layout}%
    \fi
    % this is a debug statement, that can be used to se the current state within the animation
    % \typeout{Creating col: \the\c@fancy@cols@current\space on slide: \the\c@fancy@cols@currentanim\fancy@cols@anim@suff, page: \thepage\space (width: \csuse{fancy@cols@col@\number\c@fancy@cols@current})}%
    % now we issue the beamer '\column' command. In order to expand all arguments we first
    % regarding the width, we use the macro 'fancy@cols@col@\number\c@fancy@cols@current'
    % do a 'edef' (expanded definition, with LaTeX protection mechanism):
    \protected@edef\@fancy@cols@tmp{\noexpand%
        % with '<...>' we define the animation of this column
        % counter 'fancy@cols@currentanim' holds the slide, this column should appear on
        % '\fancy@cols@anim@suff' is either '-' (with animation=keep)
        % or empty (with animation=forget)
        % with 'animation=keep' (without reverse) this would be
        % '\column<1->' for the first, '\column<2->' for the second, ...
        \column<\arabic{fancy@cols@currentanim}\fancy@cols@anim@suff>{%
            % the width of the column. For this, we use the 'fancy@cols@col@0', 'fancy@cols@col@1', ... macros
            % defined by '\fancy@cols@initialize@widths'
            \csuse{fancy@cols@col@\arabic{fancy@cols@current}}%
        }%
    }%
    % basically execute the expanded macro (e.g. insert the column)
    \@fancy@cols@tmp
    % update the current animation accordingly (with reverse '\fancy@cols@anim@step@sign' will be '-',
    % without it will be '+') the step '\fancy@cols@anim@step' is 0 for animation=none and probably 1 otherwise.
    % therefore, using 'animation=keep' without reverse, would increment the counter by '+1' (a positive 1)
    \addtocounter{fancy@cols@currentanim}{\fancy@cols@anim@step@sign\fancy@cols@anim@step}%
    % increase the current column counter (e.g. for error checking, and for getting the correct width)
    \stepcounter{fancy@cols@current}%
    \ignorespaces
}

% #1: arguments like 'columns=3, keep, reverse'
\newenvironment{fancycolumns}[1][]{\begingroup
\pgfqkeys{/fancy columns}{@defaults, #1}%
\edef\fancy@previous@fancy@cols{\thefancy@cols@current}% store the current column counter
\ifdim\fancy@cols@height<0pt\begin{minipage}{\fancy@cols@target@width}\else\begin{minipage}[\fancy@cols@valign][\fancy@cols@height]{\fancy@cols@target@width}\fi%
\begin{columns}[onlytextwidth,\fancy@cols@valign, \fancy@cols@extra]
    \fancy@cols@init
}{\end{columns}\end{minipage}\setcounter{fancy@cols@current}{\fancy@previous@fancy@cols}\endgroup}
